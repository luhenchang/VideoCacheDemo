import { ComponentContent, promptAction, PromptAction, router, window } from '@kit.ArkUI';
import { VideoContentInfo } from '../../data/VideoContentInfo';
import { VideoModel } from '../../data/VideoModel';
import { VideoTimeUtil } from '../../utils/VideoTimeUtil';
import { BusinessError } from '@kit.BasicServicesKit';
import { throttle } from '../../utils/Threottle';
import { common } from '@kit.AbilityKit';
import { hilog } from '@kit.PerformanceAnalysisKit';
import { SendVideoState } from '../AMPSVideoCachePage';
import { JumpThreadAppState } from './ThreaWayAdView';
import { PrDialogContentView } from './PrDialogContentView';

export enum GetRewardedState {
  NOT_OBTAINABLE, //ÈªòËÆ§Ê≤°ÊúâËé∑ÂæóÂ•ñÂä±
  NOW_GET_REWARDED, //Á´ãÂç≥Ëé∑ÂèñÂ•ñÂä±
  ALREADY_OBTAINED //Â∑≤ÁªèËé∑Âæó‰∫ÜÂ•ñÂä±
}

//privilegePopUpStatus
export enum PrivilegeDialogStatus {
  OPENING,
  CLOSE
}

@Preview
@Component
export struct TimeDownAndCloseView {
  @State
  jumpTime: number = 0
  @State
  optimizeTime: number = 0
  @State
  showTime: number = 0
  @State
  optimizeType: number = 0
  @Watch('updateViewModel')                                @Prop videoModel: VideoModel
  @Consume('videoState')
  videoState: SendVideoState
  @Watch('jumpThreadAppListener') @Consume('jumpThreadAppState')
  jumpThreadAppState: JumpThreadAppState
  @State timeDown: number = 0
  @State minTime: number = 0
  @State intervalId: number | undefined = undefined
  @State rewardState: GetRewardedState = GetRewardedState.NOT_OBTAINABLE
  @State intervalFlag: boolean = false
  @State plgDialogState: PrivilegeDialogStatus = PrivilegeDialogStatus.CLOSE

  aboutToAppear(): void {
    this.updateViewModel()
  }

  aboutToDisappear(): void {
    let context = getContext(this) as common.UIAbilityContext;
    this.rewardState = GetRewardedState.NOT_OBTAINABLE
    this.videoState = SendVideoState.COMPLETE;
    context.windowStage.off('windowStageEvent')
    clearInterval(this.intervalId);
  }

  //Êí≠ÊîæÂÆåÊàêÔºåÊàñËÄÖÂ∑≤ÁªèËé∑ÂèñÂ•ñÂä±ÁÇπÂáªË∑≥ËΩ¨==„ÄãÊòæÁ§∫ÂπøÂëäÈ°µÈù¢
  private finishPlayAndJumpFullAd() {
    this.videoState = SendVideoState.COMPLETE;
    clearInterval(this.intervalId);
  }

  build() {
    if (this.videoModel)
    Row() {
      if (this.optimizeType === 0) {
        if (this.rewardState === GetRewardedState.ALREADY_OBTAINED) {
          Text("Â∑≤Ëé∑ÂæóÂ•ñÂä±").fontColor(Color.White).fontSize(14)
        } else {
          Text(this.minTime + "Áßí‰πãÂêéÈ¢ÜÂèñÂ•ñÂä±").fontColor(Color.White).fontSize(14)
        }
      } else if (this.optimizeType === 1) {
        if (this.rewardState === GetRewardedState.ALREADY_OBTAINED) {
          Text("üéÅ Â∑≤Ëé∑ÂæóÂ•ñÂä±").fontColor(Color.White).fontSize(14)
        } else if (this.rewardState === GetRewardedState.NOW_GET_REWARDED) {
          Text("üéÅ Á´ãÂç≥È¢ÜÂèñ").fontColor(Color.White).fontSize(14)
        } else {
          Text("üéÅ " + this.optimizeTime + "ÁßíÂêéÁÇπÂáªÂπøÂëäÂèØÈ¢ÜÂèñÂ•ñÂä±").fontColor(Color.White).fontSize(14)
        }
      }
      Text("  |  ").fontColor(Color.White)
      if (this.videoState === SendVideoState.COMPLETE) {
        Text("ÂÖ≥Èó≠").fontColor(Color.White).fontSize(14).onClick(throttle(() => {
          clearInterval(this.intervalId)
          router.back()
        }, 1000))
      } else {
        Text("Ë∑≥Ëøá").fontColor(Color.White).fontSize(14).onClick(throttle(() => {
          if (this.rewardState === GetRewardedState.ALREADY_OBTAINED) {
            //ÂéªÂÅúÊ≠¢Êí≠Êîæ„ÄÅÂºπÂá∫È°µÈù¢
            this.videoState = SendVideoState.COMPLETE
            clearInterval(this.intervalId)
          } else {
            if (this.videoState === SendVideoState.PLAYING) {
              this.videoState = SendVideoState.PAUSED
            }
            let uiContext = this.getUIContext();
            let promptAction = uiContext.getPromptAction();
            let title = "‰ªÖÈúÄ" + this.minTime + "ÁßíÂç≥ÂèØËé∑ÂæóÂ•ñÂä±"
            let sub = "Á°ÆÂÆöË¶ÅÈÄÄÂá∫‰πà"
            let contentNode =
              new ComponentContent(uiContext, wrapBuilder(buildText),
                new Params(title, sub, 0, this.videoModel, (state: JumpThreadAppState) => {
                  this.jumpThreadAppState = state
                }, () => {
                  if (this.videoState === SendVideoState.PAUSED) {
                    this.videoState = SendVideoState.PLAYING
                  }
                  promptAction.closeCustomDialog(contentNode)
                }, () => {

                }, () => {
                  promptAction.closeCustomDialog(contentNode)
                  clearInterval(this.intervalId)
                  router.back()
                }));
            let options: promptAction.BaseDialogOptions = {
              alignment: DialogAlignment.Center,
              isModal: true,
              maskColor: "#7e090909",
              autoCancel: false
            };
            try {
              promptAction.openCustomDialog(contentNode, options);
            } catch (error) {
              let message = (error as BusinessError).message;
              let code = (error as BusinessError).code;
              console.error(`OpenCustomDialog args error code is ${code}, message is ${message}`);
            }
          }
        }, 1000))
      }

    }
    .padding({
      left: 10,
      right: 10,
      top: 4,
      bottom: 4
    })
    .backgroundColor("#5b1d1d1d")
    .border({ radius: 20, color: "#baefecec", width: 0.85 })
  }

  updateViewModel() {
    console.info("aboutToApper videoModel====" + this.videoModel + "==flag=" + this.intervalFlag)
    if (!this.videoModel || this.intervalFlag === true) {
      return
    }
    this.optimizeType = VideoTimeUtil.getOptimizeType(this.videoModel)
    this.optimizeTime = VideoTimeUtil.getOptimizeTime(this.videoModel)
    this.showTime = VideoTimeUtil.getShowTime(this.videoModel)
    //ÊéßÂà∂Êúâ‰∏îÂè™Êúâ‰∏ÄÊ¨°ÂàùÂßãÂåñ„ÄêÁä∂ÊÄÅ„ÄÅtimeDow„ÄÅminTime„ÄÅinterval„Äë
    this.intervalFlag = true
    this.videoState = SendVideoState.PLAYING
    this.timeDown = VideoTimeUtil.getTimeDown(this.videoModel)
    this.minTime = VideoTimeUtil.getMinTime(this.videoModel)
    if (this.optimizeType === 0) {
      this.intervalId = setInterval(() => {
        if (this.videoState != SendVideoState.PAUSED) {
          this.timeDown -= 1
          this.minTime -= 1

          if (this.minTime < 1) {
            this.rewardState = GetRewardedState.ALREADY_OBTAINED
          }
          if (this.timeDown < 1) {
            //ÂéªÂÅúÊ≠¢Êí≠Êîæ„ÄÅÂºπÂá∫È°µÈù¢
            this.finishPlayAndJumpFullAd();
          }
        }

      }, 1000)
    } else if (this.optimizeType === 1) {
      this.intervalId = setInterval(() => {
        if (this.videoState != SendVideoState.PAUSED) {
          this.timeDown -= 1
          this.minTime -= 1
          if (this.optimizeTime > 0) {
            this.optimizeTime -= 1
          }
          console.log("this.optimizeTime==" + this.optimizeTime)
          if (this.optimizeTime === 0 && this.rewardState === GetRewardedState.NOT_OBTAINABLE) {
            this.rewardState = GetRewardedState.NOW_GET_REWARDED
          }
          if (this.minTime < 1) {
            this.rewardState = GetRewardedState.ALREADY_OBTAINED
          }

          if (this.timeDown < 1) {
            //ÂéªÂÅúÊ≠¢Êí≠Êîæ„ÄÅÂºπÂá∫È°µÈù¢
            this.finishPlayAndJumpFullAd();
          }
        }

      }, 1000)
    } else if (this.optimizeType === 2) {

    }
    if (this.optimizeType === 0) {
      this.windowStageEvent();
    } else if (this.optimizeType === 1) {
      console.log("Ê≥®ÂÜåÊ¨°Êï∞")
      this.windowStageEventTypeOne()
    }
  }

  /**
   * Ê†πÊçÆËøõÂÖ•ÂêéÂè∞Á≠âËøõË°åÁõ∏ÂÖ≥Áä∂ÊÄÅÊìç‰Ωú„ÄÇ
   */
  private windowStageEvent() {
    let context = getContext(this) as common.UIAbilityContext;

    context.windowStage.on('windowStageEvent', async (data) => {
      let stageEventType: window.WindowStageEventType = data;
      switch (stageEventType) {
        case window.WindowStageEventType.SHOWN: // ÂàáÂà∞ÂâçÂè∞
          hilog.info(0x0000, 'testTag', `windowStage foreground.`);
          if (this.videoState === SendVideoState.PAUSED) {
            this.videoState = SendVideoState.PLAYING;
          }
          break;
        case window.WindowStageEventType.ACTIVE: // Ëé∑ÁÑ¶Áä∂ÊÄÅ
          hilog.info(0x0000, 'testTag', `windowStage active.`);
          break;
        case window.WindowStageEventType.INACTIVE: // Â§±ÁÑ¶Áä∂ÊÄÅ
          hilog.info(0x0000, 'testTag', `windowStage inactive.`);

          break;
        case window.WindowStageEventType.HIDDEN: // ÂàáÂà∞ÂêéÂè∞
          hilog.info(0x0000, 'testTag', `windowStage background.`);
          if (this.videoState === SendVideoState.PLAYING) {
            this.videoState = SendVideoState.PAUSED;
          }
          break;
        case window.WindowStageEventType.RESUMED: // ÂâçÂè∞ÂèØ‰∫§‰∫íÁä∂ÊÄÅ
          hilog.info(0x0000, 'testTag', `windowStage resumed.`);
          if (this.videoState === SendVideoState.PAUSED) {
            this.videoState = SendVideoState.PLAYING;
          }
          break;
        case window.WindowStageEventType.PAUSED: // ÂâçÂè∞‰∏çÂèØ‰∫§‰∫íÁä∂ÊÄÅ
          hilog.info(0x0000, 'testTag', `windowStage paused.`);
          if (this.videoState === SendVideoState.PLAYING) {
            this.videoState = SendVideoState.PAUSED;
          }
          break;
        default:
          break;
      }
    });
  }

  /**
   * Ê†πÊçÆËøõÂÖ•ÂêéÂè∞Á≠âËøõË°åÁõ∏ÂÖ≥Áä∂ÊÄÅÊìç‰Ωú„ÄÇ
   */
  private windowStageEventTypeOne() {
    let context = getContext(this) as common.UIAbilityContext;
    context.windowStage.on('windowStageEvent', async (data) => {
      let stageEventType: window.WindowStageEventType = data;
      switch (stageEventType) {
        case window.WindowStageEventType.SHOWN: // ÂàáÂà∞ÂâçÂè∞
          if (this.jumpThreadAppState === JumpThreadAppState.JUMP_INTO_APP) {
            this.jumpThreadAppState = JumpThreadAppState.JUMP_BACK
          }
          if (this.videoState === SendVideoState.PAUSED) {
            //1„ÄÅÂ¶ÇÊûúÊòØËøõÂÖ•‰∫ÜËêΩÂú∞È°µÊàñÂàô‰∏âÊñπÂ∫îÁî®
            if (this.jumpThreadAppState === JumpThreadAppState.JUMP_BACK) {
              //1„ÄÅ1Â¶ÇÊûúÁ´ãÂç≥Ëé∑ÂæóÂ•ñÂä±==„ÄãÁâπÊùÉÂºπÁ™óÊòæÁ§∫
              if (this.rewardState === GetRewardedState.NOW_GET_REWARDED) {
                hilog.info(0x0000, 'testTag ÂºπÂá∫Êù•', "privilegeDialogAd");
                //Á°ÆÂÆöÂºπÁ™óÊòØÂÖ≥Èó≠Áä∂ÊÄÅÂÜçÂºπÂá∫ÔºåÂèØËÉΩÁî®Êà∑Ê≤°ÂÖ≥Èó≠ÈÄÄÂá∫ÂêéÂè∞ÔºåÊ≠§Êó∂‰πüÈúÄË¶Å
                if (this.plgDialogState === PrivilegeDialogStatus.CLOSE) {
                  this.privilegeDialogAd()
                }
                //1„ÄÅ2Â¶ÇÊûúÊòØÊ≤°ÊúâÂ•ñÂä±ÊàñÂ∑≤ÁªèËé∑Âæó‰∫ÜÂ•ñÂä±  ==„ÄãËÆ©ÂÖ∂Ê≠£Â∏∏Êí≠Êîæ
              } else if (this.rewardState === GetRewardedState.NOT_OBTAINABLE ||
                this.rewardState === GetRewardedState.ALREADY_OBTAINED) {
                this.jumpThreadAppState = JumpThreadAppState.JUMP_BEFORE
                this.videoState = SendVideoState.PLAYING
              }
              //2„ÄÅÈùûËøõÂÖ•‰∏âÊñπAPPÊàñËÄÖËêΩÂú∞È°µÔºåÂ∏∏ËßÑÂ§ÑÁêÜÂç≥ÂèØ
            } else {
              if (this.plgDialogState === PrivilegeDialogStatus.CLOSE) {
                this.videoState = SendVideoState.PLAYING;
              }
            }
          }

          break;
        case window.WindowStageEventType.ACTIVE: // Ëé∑ÁÑ¶Áä∂ÊÄÅ
          hilog.info(0x0000, 'testTag', `windowStage active.`);
          break;
        case window.WindowStageEventType.INACTIVE: // Â§±ÁÑ¶Áä∂ÊÄÅ
          hilog.info(0x0000, 'testTag', `windowStage inactive.`);

          break;
        case window.WindowStageEventType.HIDDEN: // ÂàáÂà∞ÂêéÂè∞
          hilog.info(0x0000, 'testTag', `windowStage background.`);
          if (this.videoState === SendVideoState.PLAYING) {
            this.videoState = SendVideoState.PAUSED;
          }
          if (this.jumpThreadAppState === JumpThreadAppState.JUMP_BACK) {
            this.jumpThreadAppState = JumpThreadAppState.JUMP_BEFORE
          }
          break;
        case window.WindowStageEventType.RESUMED: // ÂâçÂè∞ÂèØ‰∫§‰∫íÁä∂ÊÄÅ
          hilog.info(0x0000, 'testTag', `windowStage resumed.`);
          if (this.videoState === SendVideoState.PAUSED) {
            if (this.plgDialogState === PrivilegeDialogStatus.CLOSE) {
              this.videoState = SendVideoState.PLAYING;
            }
          }

          break;
        case window.WindowStageEventType.PAUSED: // ÂâçÂè∞‰∏çÂèØ‰∫§‰∫íÁä∂ÊÄÅ
          hilog.info(0x0000, 'testTag', `windowStage paused.`);
          if (this.videoState === SendVideoState.PLAYING) {
            this.videoState = SendVideoState.PAUSED;
          }
          if (this.jumpThreadAppState === JumpThreadAppState.JUMP_BACK) {
            this.jumpThreadAppState = JumpThreadAppState.JUMP_BEFORE
          }
          break;
        default:
          break;
      }
    });
  }

  jumpThreadAppListener() {
    if (this.jumpThreadAppState === JumpThreadAppState.JUMP_START) {
      hilog.info(0x0000, 'testTag', `jumpThreadAppListener =${this.jumpThreadAppState}}`);
      this.jumpThreadAppState = JumpThreadAppState.JUMP_INTO_APP
      this.jumpTime = new Date().getTime()
    }
  }

  privilegeDialogAd() {
    if (this.jumpThreadAppState === JumpThreadAppState.JUMP_BACK) {
      let uiContext = this.getUIContext();
      let promptAction = uiContext.getPromptAction();
      let title = "ÊÅ≠ÂñúËé∑ÂæóÁâπÊùÉ"
      let sub = "ÁªßÁª≠‰ΩìÈ™åÂÜÖÂÆπ"
      this.showTime -= Math.floor((new Date().getTime() - this.jumpTime) / 1000)
      if (this.showTime <= 0) {
        this.videoState = SendVideoState.COMPLETE;
        this.jumpThreadAppState = JumpThreadAppState.JUMP_BEFORE
        this.rewardState = GetRewardedState.ALREADY_OBTAINED
        clearInterval(this.intervalId);
        return
      }
      let contentNode =
        new ComponentContent(uiContext, wrapBuilder(MPrDialogContentView),
          new Params(title, sub, this.showTime, this.videoModel, (state: JumpThreadAppState) => {
            this.plgDialogState === PrivilegeDialogStatus.CLOSE
            this.jumpThreadAppState = state
            promptAction.closeCustomDialog(contentNode).then(() => {
              this.plgDialogState = PrivilegeDialogStatus.CLOSE
            })
          }, () => {
            if (this.videoState === SendVideoState.PAUSED) {
              this.videoState = SendVideoState.PLAYING
            }
            this.jumpThreadAppState = JumpThreadAppState.JUMP_BEFORE
            hilog.info(0x0000, 'testTag', `privilegeDialogAd closeDialog =${this.jumpThreadAppState}}`);
            promptAction.closeCustomDialog(contentNode).then(() => {
              this.plgDialogState = PrivilegeDialogStatus.CLOSE
            })
          }, () => {
            //ÊîæÂºÉÁâπÊùÉ
            this.showTime = VideoTimeUtil.getShowTime(this.videoModel)
            if (this.videoState === SendVideoState.PAUSED) {
              this.videoState = SendVideoState.PLAYING
            }
            this.jumpThreadAppState = JumpThreadAppState.JUMP_BEFORE
            promptAction.closeCustomDialog(contentNode).then(() => {
              this.plgDialogState = PrivilegeDialogStatus.CLOSE
            })
          }, () => {
            promptAction.closeCustomDialog(contentNode).then(() => {
              this.plgDialogState = PrivilegeDialogStatus.CLOSE
            })
            clearInterval(this.intervalId)
            router.back()
          }));
      let options: promptAction.BaseDialogOptions = {
        alignment: DialogAlignment.Center,
        isModal: true,
        maskColor: "#7e090909",
        autoCancel: false,
        onWillDismiss: () => {
        }
      };
      try {
        promptAction.openCustomDialog(contentNode, options).then(() => {
          this.plgDialogState = PrivilegeDialogStatus.OPENING
        });
      } catch (error) {
        let message = (error as BusinessError).message;
        let code = (error as BusinessError).code;
        console.error(`OpenCustomDialog args error code is ${code}, message is ${message}`);
      }
    }
  }
}

export class Params {
  title: string = '';
  sub: string = ''
  time: number
  videoModel: VideoModel | undefined
  onClose: () => void
  onContinue: () => void
  onAbandonCall: () => void
  jumpAppStateCall: (state: JumpThreadAppState) => void

  constructor(text: string, sub: string, time: number, videoModel: VideoModel | undefined,
    jumpAppStateCall: (state: JumpThreadAppState) => void, onContinue: () => void, onAbandonCall: () => void,
    onClose: () => void) {
    this.title = text
    this.sub = sub
    this.time = time
    this.videoModel = videoModel
    this.onContinue = onContinue
    this.jumpAppStateCall = jumpAppStateCall
    this.onClose = onClose
    this.onAbandonCall = onAbandonCall
  }
}

@Builder
export function buildText(params: Params) {
  Column() {
    Text(params.title)
      .fontSize(16).margin({ top: 15 })
    Text(params.sub)
      .fontSize(16).margin({ top: 15 })
    Button("ÁªßÁª≠ËßÇÁúã").width('100%').fontSize(14).margin({ top: 20 }).onClick(() => {
      params.onContinue()
    })
    Text("ÂÖ≥Èó≠ÂπøÂëä")
      .fontSize(14)
      .fontColor(Color.Gray)
      .margin({ top: 20, bottom: 15 })
      .onClick(() => {
        params.onClose()
      })
  }
  .width('80%')
  .padding(24)
  .justifyContent(FlexAlign.Center)
  .alignItems(HorizontalAlign.Center)
  .backgroundColor(Color.White)
  .borderRadius(24)
}

@Builder
function MPrDialogContentView(params: Params): void {
  PrDialogContentView({ params, videoModel: params.videoModel })
}
